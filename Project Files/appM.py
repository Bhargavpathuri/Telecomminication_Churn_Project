# -*- coding: utf-8 -*-
"""appB

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vADydd-TKnxET2AgjyAO0HkTtYwz5ryB
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
from io import BytesIO
import random

# Load the dataset
data = pd.read_csv("telecommunications_churn.csv")

# Load the trained model and scaler
model = joblib.load("random_forest_model.pkl")
scaler = joblib.load("scaler.pkl")

# Add custom CSS
st.markdown(
    """
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(to right, #f7f7f7, #e3f2fd);
            color: #333333;
        }
        .stButton button {
            background-color: #32CD32;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 8px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, background-color 0.3s;
        }
        .stButton button:hover {
            background-color: #ff8c66;
            transform: scale(1.05);
        }
        .stSlider {
            color: #0056b3;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# Streamlit UI
st.title("Customer Churn Prediction App")
st.write("Enter customer details to predict churn probability.")

# Input customer number
customer_number = st.number_input("Enter Customer Number (0 to 3332)", min_value=0, max_value=3332, step=1)

# Auto-fill functionality
if 0 <= customer_number < len(data):
    customer_data = data.iloc[customer_number]
    st.write("Customer data loaded successfully!")
else:
    customer_data = None
    st.write("Please enter a valid customer number.")

# Input fields
columns = data.columns[:-1]  # Exclude churn column
input_data = {}
if customer_data is not None:
    for col in columns:
        if data[col].dtype == 'int64':
            input_data[col] = st.number_input(col, value=int(customer_data[col]))
        elif data[col].dtype == 'float64':
            input_data[col] = st.number_input(col, value=float(customer_data[col]))
else:
    for col in columns:
        if data[col].dtype == 'int64':
            input_data[col] = st.number_input(col, value=0)
        elif data[col].dtype == 'float64':
            input_data[col] = st.number_input(col, value=0.0)

# Churn prediction threshold
threshold = st.slider("Set Churn Probability Threshold", 0.1, 0.9, 0.5)

# Predict button
if st.button("Predict"):
    # Prepare input for prediction
    features = np.array(list(input_data.values()))
    scaled_features = scaler.transform(features.reshape(1, -1))

    # Prediction
    churn_probability = model.predict_proba(scaled_features)[0][1]
    churn_prediction = "Likely to churn" if churn_probability > threshold else "Unlikely to churn"

    # Display results
    st.write(f"**Churn Probability:** {churn_probability:.2f}")
    st.write(f"**Churn Prediction:** {churn_prediction}")

    # Celebration visuals
    if churn_probability > threshold:
        st.success("ðŸŽ‰ Great prediction! The customer is likely to churn!")
    else:
        st.success("âœ¨ Excellent! The customer is unlikely to churn!")

    # Visualization of inputs
    st.subheader("Input Values")
    colors = [f"#{random.randint(0, 0xFFFFFF):06x}" for _ in columns]
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.barh(columns, features, color=colors)
    ax.set_xlabel("Value")
    ax.set_ylabel("Features")
    ax.set_title("Customer Features")
    st.pyplot(fig)

    # Downloadable CSV
    output = pd.DataFrame([input_data])
    output["Churn Probability"] = churn_probability
    output["Churn Prediction"] = churn_prediction
    csv = BytesIO()
    output.to_csv(csv, index=False)
    st.download_button(
        label="Download Prediction as CSV",
        data=csv.getvalue(),
        file_name="churn_prediction.csv",
        mime="text/csv",
    )